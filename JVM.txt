                                   Java Virtual Machine (JVM)

The JVM is an abstract computing machine that enables a computer to run a Java program. There are 
three notions of JVM: specification (where working of JVM is specified. But the implementation has
been provided by Sun and other companies), implementation (known as (JRE) Java Runtime Environment)
and instance (after writing Java command, to run Java class, an instance of JVM is created).

The JVM loads the code, verifies the code, executes the code, manages memory (this includes allocating
memory from the Operating System (OS), managing Java allocation including heap compaction and removal
of garbage objects) and finally provides the runtime environment.

JVM memory is divided into multiple parts: 
1. Heap Memory
2. Non-Heap Memory
3. Other

* Heap memory:
Heap memory is the run time data area from which the memory for all java class instances and arrays is
allocated. The heap is created when the JVM starts up and may increase or decrease in size while the 
application runs. The size of the heap can be specified using –Xms VM option. The heap can be of fixed 
size or variable size depending on the garbage collection strategy. Maximum heap size can be set using 
–Xmx option. By default, the maximum heap size is set to 64 MB.

* Non-Heap memory:
The JVM has memory other than the heap, referred to as Non-Heap Memory. It is created at the JVM startup
and stores per-class structures such as runtime constant pool, field and method data, and the code for 
methods and constructors, as well as interned Strings. The default maximum size of non-heap memory is 
64 MB. This can be changed using –XX:MaxPermSize VM option.

* Other memory:
JVM uses this space to store the JVM code itself, JVM internal structures, loaded profiler agent code and 
data, etc.